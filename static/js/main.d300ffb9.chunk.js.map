{"version":3,"sources":["component/customDropzoen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","maxWidth","activeStyle","acceptStyle","rejectStyle","MyDropZone","onDrop","useCallback","acceptedFiles","console","log","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","App","ref","useRef","openToolTip","current","open","setLoading","useState","currentLink","setCurrentLink","loading","isDark","setIsDark","serverResponse","setResponse","handleKeyDown","event","a","key","requestOptions","method","headers","body","JSON","stringify","link","fetch","response","json","data","className","src","modal","nested","checked","onChange","target","icons","unchecked","type","value","e","onKeyDown","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d300ffb9.chunk.js","sourcesContent":["import React, { useCallback, useMemo } from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nconst baseStyle = {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column' as 'column',\r\n    alignItems: 'center',\r\n    padding: '20px',\r\n    borderWidth: 2,\r\n    borderRadius: 2,\r\n    borderColor: '#eeeeee',\r\n    borderStyle: 'dashed',\r\n    backgroundColor: '#fafafa',\r\n    color: '#bdbdbd',\r\n    outline: 'none',\r\n    transition: 'border .24s ease-in-out',\r\n    maxWidth: '500px'\r\n};\r\n\r\nconst activeStyle = {\r\n    borderColor: '#2196f3'\r\n};\r\n\r\nconst acceptStyle = {\r\n    borderColor: '#00e676'\r\n};\r\n\r\nconst rejectStyle = {\r\n    borderColor: '#ff1744'\r\n};\r\n  \r\n\r\nfunction MyDropZone() {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        console.log(acceptedFiles);\r\n    }, []);\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({accept: 'image/*', onDrop});\r\n\r\n    const style = useMemo(() => ({\r\n        ...baseStyle,\r\n        ...(isDragActive ? activeStyle : {}),\r\n        ...(isDragAccept ? acceptStyle : {}),\r\n        ...(isDragReject ? rejectStyle : {})\r\n    }), [\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject\r\n    ])\r\n\r\n    return (\r\n        <div {...getRootProps({style})}>\r\n            <input {...getInputProps()} />\r\n            {\r\n                isDragActive ?\r\n                <p>Drop the files here ...</p> :\r\n                <p>Drag 'n' drop some files here, or click to select files</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyDropZone;","import React, { useRef, useEffect, useState, ReactElement } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MyDropZone from './component/customDropzoen';\nimport { gsap } from 'gsap';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport { PopupActions } from 'reactjs-popup/dist/types';\nimport Toggle from 'react-toggle';\nimport \"react-toggle/style.css\"\nimport { FaSun, FaMoon } from 'react-icons/fa';\n\nfunction App() {\n\n  const ref = useRef<PopupActions>(null);\n  const openToolTip = () => {\n    ref?.current?.open()\n    setLoading(false);\n  };\n\n  const [currentLink, setCurrentLink] = useState('https://www.pokepedia.fr/images/thumb/f/fa/Latios-RS.png/250px-Latios-RS.png');\n  const [loading, setLoading] = useState(false);\n  const [isDark, setIsDark] = useState(true);\n  const [serverResponse, setResponse] = useState('');\n\n  const handleKeyDown = async (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      // Send request and wait\n      // Then trigger the popup\n      \n      // Tu com les 2 lignes la et tu decom le reste apres\n      setLoading(true)\n      console.log(currentLink);\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify({ link: currentLink })\n      }\n\n      // TODO: Change l'url ici pour tes propres request\n      const response = await fetch(\"http://localhost:8080\", requestOptions);\n      const data = await response.json();\n      console.log(data);\n      setResponse(data?.response);\n      openToolTip();\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {console.log('render', loading)}\n      {loading\n        ? <div className=\"overlay\"><img src={'https://media3.giphy.com/media/IQebREsGFRXmo/200.gif'}/></div>\n        : <div></div>\n      }\n\n      <Popup\n        modal\n        nested\n        ref={ref}>\n        <div> <img className=\"pikachu\" src={currentLink} /> </div>\n        <p> {serverResponse} </p>\n      </Popup>\n\n      <Toggle\n        className=\"dark-mode-toggle\"\n        checked={isDark}\n        onChange={({ target }) => setIsDark(target.checked)}\n        icons={{ checked: <FaMoon />, unchecked: <FaSun />}}\n      />\n\n      <div>\n        <img className=\"pikachu\" src={'/pikachu.png'} />\n      </div>\n\n      {/* text input goes here */}\n      \n      <div>\n        <input className=\"Text-input\" type=\"text\" value={currentLink} onChange={(e) => setCurrentLink(e.target.value)}\n        onKeyDown={(e) => {\n          handleKeyDown(e)\n        }}/>\n      </div>\n\n      <div className=\"dropZoneWrapper\">\n        <MyDropZone />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}