{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","ref","useRef","openToolTip","current","open","setLoading","useState","currentLink","setCurrentLink","loading","isDark","setIsDark","serverResponse","setResponse","useEffect","document","body","classList","add","remove","handleKeyDown","event","a","key","requestServer","requestOptions","method","headers","JSON","stringify","link","fetch","response","json","data","console","log","useMediaQuery","query","undefined","isSystemDark","className","alt","src","modal","nested","id","style","margin","checked","onChange","target","icons","unchecked","color","type","value","placeholder","e","onKeyDown","Button","variant","disabled","onClick","href","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c20192fd.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './App.css';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport { PopupActions } from 'reactjs-popup/dist/types';\nimport Toggle from 'react-toggle';\nimport \"react-toggle/style.css\"\nimport { FaMoon } from 'react-icons/fa';\nimport { useMediaQuery } from 'react-responsive';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Briefcase, Globe, Sun } from 'react-bootstrap-icons';\n \nfunction App() {\n\n  const ref = useRef<PopupActions>(null);\n  const openToolTip = () => {\n    ref?.current?.open()\n    setLoading(false);\n  };\n\n\n  // https://www.pokepedia.fr/images/thumb/f/fa/Latios-RS.png/250px-Latios-RS.png\n  const [currentLink, setCurrentLink] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isDark, setIsDark] = useState(true);\n  const [serverResponse, setResponse] = useState('');\n\n  useEffect(() => {\n    if (isDark) {\n      document.body.classList.add('dark');\n    } else {\n      document.body.classList.remove('dark');\n    }\n  }, [isDark]); \n\n  const handleKeyDown = async (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      requestServer();\n    }\n  }\n\n  const requestServer = async () => {\n    if (currentLink === '') {\n      return;\n    }\n    setLoading(true)\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({ link: currentLink })\n    }\n\n    // TODO: Change l'url ici pour tes propres request\n    const response = await fetch(\"https://pokedex-preproc.herokuapp.com/\", requestOptions);\n    const data = await response.json();\n    console.log(data);\n    setResponse(data?.response);\n    openToolTip();\n  }\n\n  const systemPreferDark = useMediaQuery(\n    {\n      query: \"(prefers-color-scheme: dark)\"\n    },\n    undefined,\n    (isSystemDark: boolean) => setIsDark(isSystemDark)\n  );\n\n  return (\n    <div className=\"App\">\n      {console.log('render', loading)}\n      {loading\n        ? <div className=\"overlay\"><img alt=\"Loading Mew\" src={'https://media3.giphy.com/media/IQebREsGFRXmo/200.gif'}/></div>\n        : <div></div>\n      }\n\n      <Popup\n        modal\n        nested\n        className=\"response-popup\"\n        ref={ref}>\n        <div id=\"response-popup-content\">\n          <img alt=\"Ton pokemon fourni\" className=\"pikachu\" src={currentLink} />\n          <p style={{ margin: '1em' }}> {serverResponse} </p>\n        </div>\n      </Popup>\n      <div className=\"content\">\n        <div className=\"header\">\n          <div>\n            <img alt=\"Detective Pikachu\" className=\"pikachu\" src={'/poke-front/pikachu.png'} />\n          </div>\n          <div className=\"toggle-position\">\n            <Toggle\n              className=\"toggle-style\"\n              checked={isDark}\n              onChange={({ target }) => setIsDark(target.checked)}\n              icons={{ checked: <FaMoon />, unchecked: <Sun color=\"white\" />}}\n            />\n          </div>\n        </div>\n\n        {/* text input goes here */}\n        \n        <div style={{ margin: \"0.5em\"}}>\n          <input className=\"Text-input\" type=\"text\" value={currentLink} placeholder=\"Your link here...\" onChange={(e) => setCurrentLink(e.target.value)}\n          onKeyDown={(e) => {\n            handleKeyDown(e)\n          }}/>\n          <Button variant=\"outline-primary\" disabled={loading} onClick={(e) => { if (!loading) { requestServer(); }}}> {loading ? 'Loading...' : 'Go' } </Button>{' '}\n        </div>\n        <div className=\"tldr\">\n          <article>\n            <h2>Comment ça marche ? :</h2>\n            <p>\n              Copier l'URL de l'image d'un Pokémon de la 1re génération (Pokémon n°1 - Bulbizarre à 151 - Mew) dans le champ de recherche et cliquer sur Go.<br />\n              L'image doit être \"propre\", c'est-à-dire qu'elle ne doit pas contenir trop de bruit visuel et que le Pokémon doit être seul et dans sa couleur d'origine.<br />\n              Ensuite, un serveur en Python va récupérer l'image partagée, la redimensionner et la transformer en tableau. Le réseau de neurones va identifier les caractéristiques propres à ce Pokémon et les comparer à celles apprises pendant son entraînement pour donner en retour le nom d'un Pokémon et la probabilité que ce soit lui en pourcentage.<br />\n            </p>\n          </article>\n          <article>\n            <h2>Mise en garde :</h2>\n            <p>\n              - Le set d'images a été construit à partir de plusieurs sets différents, qui ont été nettoyés pour récupérer les images les plus fidèles.<br />\n              - Il s'agit d'un projet de démo, c'est pourquoi il ne contient que la 1re génération de Pokémon.<br />\n              - La probabilité de reconnaître un Pokémon dépends du nombre d'images différentes le représentant dans le set d'entraînement.<br />\n            </p>\n          </article>\n          <article>\n            <h2>Ce qui fait tourner le Pokédex :</h2>\n            <p>\n            - Python, TensorFlow et Keras (Librairies), Docker (Containers : 1 pour le réseau de neurones, 1 pour le serveur), GitHub, Heroku (hébergement).\n            </p>\n          </article>\n        </div>\n\n      </div>\n\n      <footer className=\"App-footer\">\n        <div className=\"links\">\n          <a href=\"https://www.malt.fr/profile/oxpure\"><Briefcase /></a>\n          <a href=\"https://oxpure.tech/\"><Globe /></a>\n        </div>\n        <p style={{ paddingTop: '0.6em' }}>Pokémon c'était pas mieux avant</p>\n        <p className=\"copyright\">©2021 - Frontpage made by <a className=\"linkMaker\" href=\"https://github.com/lnieto-m\"> Luis Nieto Munoz </a></p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}